    /* "t2.sol":1869:1903  string public name = "BeautyChain" */
  0xc0
    /* "t2.sol":1830:2427  contract BecToken is PausableToken {... */
  0x40
    /* "t2.sol":1869:1903  string public name = "BeautyChain" */
  mstore
  0x0b
    /* "t2.sol":1830:2427  contract BecToken is PausableToken {... */
  0x80
    /* "t2.sol":1869:1903  string public name = "BeautyChain" */
  dup2
  swap1
  mstore
  0x426561757479436861696e000000000000000000000000000000000000000000
  0xa0
  swap1
  dup2
  mstore
  tag_1
  swap2
  0x04
  swap2
  swap1
  tag_2
  jump	// in
tag_1:
  pop
    /* "t2.sol":1907:1935  string public symbol = "BEC" */
  0x40
  dup1
  mload
  dup1
  dup3
  add
  swap1
  swap2
  mstore
  0x03
  dup1
  dup3
  mstore
  0x4245430000000000000000000000000000000000000000000000000000000000
  0x20
  swap1
  swap3
  add
  swap2
  dup3
  mstore
  tag_3
  swap2
  0x05
  swap2
  tag_2
  jump	// in
tag_3:
  pop
    /* "t2.sol":1939:1970  string public version = '1.0.0' */
  0x40
  dup1
  mload
  dup1
  dup3
  add
  swap1
  swap2
  mstore
  0x05
  dup1
  dup3
  mstore
  0x312e302e30000000000000000000000000000000000000000000000000000000
  0x20
  swap1
  swap3
  add
  swap2
  dup3
  mstore
  tag_4
  swap2
  0x06
  swap2
  tag_2
  jump	// in
tag_4:
  pop
    /* "t2.sol":1974:2000  uint8 public decimals = 18 */
  0x07
  dup1
  sload
  not(0xff)
  and
    /* "t2.sol":1998:2000  18 */
  0x12
    /* "t2.sol":1974:2000  uint8 public decimals = 18 */
  or
  swap1
  sstore
    /* "t2.sol":2004:2425  constructor () public {... */
  callvalue
    /* "--CODEGEN--":5:7   */
  dup1
  iszero
  tag_5
  jumpi
    /* "--CODEGEN--":30:31   */
  0x00
    /* "--CODEGEN--":27:28   */
  dup1
    /* "--CODEGEN--":20:32   */
  revert
    /* "--CODEGEN--":5:7   */
tag_5:
  pop
    /* "t2.sol":2073:2081  decimals */
  and(0xff, sload(0x07))
    /* "t2.sol":2060:2062  10 */
  0x0a
    /* "t2.sol":2060:2083  10**(uint256(decimals)) */
  exp
    /* "t2.sol":2046:2056  7000000000 */
  0x01a13b8600
    /* "t2.sol":2046:2084  7000000000 * (10**(uint256(decimals))) */
  mul
    /* "t2.sol":2073:2081  decimals */
  0x01
    /* "t2.sol":2032:2084  totalSupply = 7000000000 * (10**(uint256(decimals))) */
  sstore
    /* "t2.sol":2139:2149  msg.sender */
  caller
  0x00
    /* "t2.sol":2130:2150  balances[msg.sender] */
  swap1
  dup2
  mstore
    /* "t2.sol":2130:2138  balances */
  0x02
    /* "t2.sol":2130:2150  balances[msg.sender] */
  0x20
  mstore
  0x40
  dup2
  keccak256
  sload
    /* "t2.sol":2115:2126  sum_balance */
  swap1
  sload
    /* "t2.sol":2115:2150  sum_balance >= balances[msg.sender] */
  lt
  iszero
    /* "t2.sol":2108:2151  assert(sum_balance >= balances[msg.sender]) */
  tag_8
  jumpi
  invalid
tag_8:
    /* "t2.sol":2185:2195  msg.sender */
  caller
    /* "t2.sol":2176:2196  balances[msg.sender] */
  0x00
  swap1
  dup2
  mstore
    /* "t2.sol":2176:2184  balances */
  0x02
    /* "t2.sol":2176:2196  balances[msg.sender] */
  0x20
  mstore
  0x40
  dup2
  keccak256
  dup1
  sload
    /* "t2.sol":2161:2196  sum_balance -= balances[msg.sender] */
  dup3
  sload
  sub
  dup3
  sstore
  0x01
    /* "t2.sol":2235:2246  totalSupply */
  sload
    /* "t2.sol":2212:2246  balances[msg.sender] = totalSupply */
  dup1
  dup3
  sstore
    /* "t2.sol":2264:2299  sum_balance += balances[msg.sender] */
  dup3
  sload
  add
  swap2
  dup3
  swap1
  sstore
    /* "t2.sol":2331:2351  balances[msg.sender] */
  sload
  gt
    /* "t2.sol":2316:2351  sum_balance >= balances[msg.sender] */
  iszero
    /* "t2.sol":2309:2352  assert(sum_balance >= balances[msg.sender]) */
  tag_9
  jumpi
  invalid
tag_9:
    /* "t2.sol":2402:2413  sum_balance */
  sload(0x00)
    /* "t2.sol":2387:2398  totalSupply */
  sload(0x01)
    /* "t2.sol":2387:2413  totalSupply == sum_balance */
  eq
    /* "t2.sol":2380:2414  assert(totalSupply == sum_balance) */
  tag_10
  jumpi
  invalid
tag_10:
    /* "t2.sol":1830:2427  contract BecToken is PausableToken {... */
  jump(tag_11)
tag_2:
  dup3
  dup1
  sload
  0x01
  dup2
  0x01
  and
  iszero
  0x0100
  mul
  sub
  and
  0x02
  swap1
  div
  swap1
  0x00
  mstore
  keccak256(0x00, 0x20)
  swap1
  0x1f
  add
  0x20
  swap1
  div
  dup2
  add
  swap3
  dup3
  0x1f
  lt
  tag_13
  jumpi
  dup1
  mload
  not(0xff)
  and
  dup4
  dup1
  add
  or
  dup6
  sstore
  jump(tag_15)
tag_13:
  dup3
  dup1
  add
  0x01
  add
  dup6
  sstore
  dup3
  iszero
  tag_15
  jumpi
  swap2
  dup3
  add
tag_14:
  dup3
  dup2
  gt
  iszero
  tag_15
  jumpi
  dup3
  mload
  dup3
  sstore
  swap2
  0x20
  add
  swap2
  swap1
  0x01
  add
  swap1
  jump(tag_14)
tag_15:
  pop
  tag_16
  swap3
  swap2
  pop
  tag_17
  jump	// in
tag_16:
  pop
  swap1
  jump	// out
tag_17:
  tag_18
  swap2
  swap1
tag_19:
  dup1
  dup3
  gt
  iszero
  tag_16
  jumpi
  0x00
  dup2
  sstore
  0x01
  add
  jump(tag_19)
tag_18:
  swap1
  jump	// out
tag_11:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "t2.sol":1830:2427  contract BecToken is PausableToken {... */
      mstore(0x40, 0x80)
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
        /* "t2.sol":1830:2427  contract BecToken is PausableToken {... */
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x06fdde03
      eq
      tag_3
      jumpi
      dup1
      0x18160ddd
      eq
      tag_4
      jumpi
      dup1
      0x313ce567
      eq
      tag_5
      jumpi
      dup1
      0x54fd4d50
      eq
      tag_6
      jumpi
      dup1
      0x83f12fec
      eq
      tag_7
      jumpi
      dup1
      0x95d89b41
      eq
      tag_8
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "t2.sol":1869:1903  string public name = "BeautyChain" */
    tag_3:
      tag_9
      tag_10
      jump	// in
    tag_9:
      0x40
      dup1
      mload
      0x20
      dup1
      dup3
      mstore
      dup4
      mload
      dup2
      dup4
      add
      mstore
      dup4
      mload
      swap2
      swap3
      dup4
      swap3
      swap1
      dup4
      add
      swap2
      dup6
      add
      swap1
      dup1
      dup4
      dup4
      0x00
        /* "--CODEGEN--":8:108   */
    tag_11:
        /* "--CODEGEN--":33:36   */
      dup4
        /* "--CODEGEN--":30:31   */
      dup2
        /* "--CODEGEN--":27:37   */
      lt
        /* "--CODEGEN--":8:108   */
      iszero
      tag_13
      jumpi
        /* "--CODEGEN--":90:101   */
      dup2
      dup2
      add
        /* "--CODEGEN--":84:102   */
      mload
        /* "--CODEGEN--":71:82   */
      dup4
      dup3
      add
        /* "--CODEGEN--":64:103   */
      mstore
        /* "--CODEGEN--":52:54   */
      0x20
        /* "--CODEGEN--":45:55   */
      add
        /* "--CODEGEN--":8:108   */
      jump(tag_11)
    tag_13:
        /* "--CODEGEN--":12:26   */
      pop
        /* "t2.sol":1869:1903  string public name = "BeautyChain" */
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_14
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_14:
      pop
      swap3
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "t2.sol":632:658  uint256 public totalSupply */
    tag_4:
      tag_15
      tag_16
      jump	// in
    tag_15:
      0x40
      dup1
      mload
      swap2
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "t2.sol":1974:2000  uint8 public decimals = 18 */
    tag_5:
      tag_17
      tag_18
      jump	// in
    tag_17:
      0x40
      dup1
      mload
      0xff
      swap1
      swap3
      and
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "t2.sol":1939:1970  string public version = '1.0.0' */
    tag_6:
      tag_9
      tag_20
      jump	// in
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
    tag_7:
      tag_25
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_26
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_26:
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      dup2
      add
      swap1
      0x20
      dup2
      add
      dup2
      calldataload
        /* "--CODEGEN--":21:32   */
      0x0100000000
        /* "--CODEGEN--":5:33   */
      dup2
      gt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_27
      jumpi
        /* "--CODEGEN--":46:47   */
      0x00
        /* "--CODEGEN--":43:44   */
      dup1
        /* "--CODEGEN--":36:48   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_27:
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      dup3
      add
        /* "--CODEGEN--":35:44   */
      dup4
        /* "--CODEGEN--":28:32   */
      0x20
        /* "--CODEGEN--":12:26   */
      dup3
        /* "--CODEGEN--":8:33   */
      add
        /* "--CODEGEN--":5:45   */
      gt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_28
      jumpi
        /* "--CODEGEN--":58:59   */
      0x00
        /* "--CODEGEN--":55:56   */
      dup1
        /* "--CODEGEN--":48:60   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_28:
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
        /* "--CODEGEN--":101:110   */
      dup5
        /* "--CODEGEN--":95:97   */
      0x20
        /* "--CODEGEN--":81:93   */
      dup4
        /* "--CODEGEN--":77:98   */
      mul
        /* "--CODEGEN--":67:75   */
      dup5
        /* "--CODEGEN--":63:99   */
      add
        /* "--CODEGEN--":60:111   */
      gt
        /* "--CODEGEN--":39:50   */
      0x0100000000
        /* "--CODEGEN--":25:37   */
      dup4
        /* "--CODEGEN--":22:51   */
      gt
        /* "--CODEGEN--":11:119   */
      or
        /* "--CODEGEN--":8:10   */
      iszero
      tag_29
      jumpi
        /* "--CODEGEN--":132:133   */
      0x00
        /* "--CODEGEN--":129:130   */
      dup1
        /* "--CODEGEN--":122:134   */
      revert
        /* "--CODEGEN--":8:10   */
    tag_29:
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      swap2
      swap1
      dup1
      dup1
      0x20
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      0x20
      mul
        /* "--CODEGEN--":30:33   */
      dup1
        /* "--CODEGEN--":22:28   */
      dup3
        /* "--CODEGEN--":14:20   */
      dup5
        /* "--CODEGEN--":1:34   */
      calldatacopy
        /* "--CODEGEN--":99:100   */
      0x00
        /* "--CODEGEN--":81:97   */
      swap3
      add
        /* "--CODEGEN--":74:101   */
      swap2
      swap1
      swap2
      mstore
      pop
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      swap3
      swap6
      pop
      pop
      swap2
      calldataload
      swap3
      pop
      tag_30
      swap2
      pop
      pop
      jump	// in
    tag_25:
      0x40
      dup1
      mload
      swap2
      iszero
      iszero
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "t2.sol":1907:1935  string public symbol = "BEC" */
    tag_8:
      tag_9
      tag_32
      jump	// in
        /* "t2.sol":1869:1903  string public name = "BeautyChain" */
    tag_10:
      0x04
      dup1
      sload
      0x40
      dup1
      mload
      0x20
      0x02
      0x01
      dup6
      and
      iszero
      0x0100
      mul
      not(0x00)
      add
      swap1
      swap5
      and
      swap4
      swap1
      swap4
      div
      0x1f
      dup2
      add
      dup5
      swap1
      div
      dup5
      mul
      dup3
      add
      dup5
      add
      swap1
      swap3
      mstore
      dup2
      dup2
      mstore
      swap3
      swap2
      dup4
      add
      dup3
      dup3
      dup1
      iszero
      tag_37
      jumpi
      dup1
      0x1f
      lt
      tag_38
      jumpi
      0x0100
      dup1
      dup4
      sload
      div
      mul
      dup4
      mstore
      swap2
      0x20
      add
      swap2
      jump(tag_37)
    tag_38:
      dup3
      add
      swap2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
    tag_39:
      dup2
      sload
      dup2
      mstore
      swap1
      0x01
      add
      swap1
      0x20
      add
      dup1
      dup4
      gt
      tag_39
      jumpi
      dup3
      swap1
      sub
      0x1f
      and
      dup3
      add
      swap2
    tag_37:
      pop
      pop
      pop
      pop
      pop
      dup2
      jump	// out
        /* "t2.sol":632:658  uint256 public totalSupply */
    tag_16:
      sload(0x01)
      dup2
      jump	// out
        /* "t2.sol":1974:2000  uint8 public decimals = 18 */
    tag_18:
      and(0xff, sload(0x07))
      dup2
      jump	// out
        /* "t2.sol":1939:1970  string public version = '1.0.0' */
    tag_20:
      0x06
      dup1
      sload
      0x40
      dup1
      mload
      0x20
      0x02
      0x01
      dup6
      and
      iszero
      0x0100
      mul
      not(0x00)
      add
      swap1
      swap5
      and
      swap4
      swap1
      swap4
      div
      0x1f
      dup2
      add
      dup5
      swap1
      div
      dup5
      mul
      dup3
      add
      dup5
      add
      swap1
      swap3
      mstore
      dup2
      dup2
      mstore
      swap3
      swap2
      dup4
      add
      dup3
      dup3
      dup1
      iszero
      tag_37
      jumpi
      dup1
      0x1f
      lt
      tag_38
      jumpi
      0x0100
      dup1
      dup4
      sload
      div
      mul
      dup4
      mstore
      swap2
      0x20
      add
      swap2
      jump(tag_37)
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
    tag_30:
        /* "t2.sol":875:892  _receivers.length */
      dup2
      mload
        /* "t2.sol":852:856  bool */
      0x00
        /* "t2.sol":956:967  sum_balance */
      dup1
      sload
        /* "t2.sol":852:856  bool */
      swap1
      swap2
        /* "t2.sol":875:892  _receivers.length */
      swap1
        /* "t2.sol":915:936  uint256(cnt) * _value */
      dup4
      dup3
      mul
      swap1
        /* "t2.sol":981:988  cnt > 0 */
      dup3
      iszero
      dup1
      iszero
      swap1
        /* "t2.sol":981:1001  cnt > 0 && cnt <= 20 */
      tag_44
      jumpi
      pop
        /* "t2.sol":999:1001  20 */
      0x14
        /* "t2.sol":992:995  cnt */
      dup4
        /* "t2.sol":992:1001  cnt <= 20 */
      gt
      iszero
        /* "t2.sol":981:1001  cnt > 0 && cnt <= 20 */
    tag_44:
        /* "t2.sol":973:1002  require(cnt > 0 && cnt <= 20) */
      tag_45
      jumpi
      0x00
      dup1
      revert
    tag_45:
        /* "t2.sol":1035:1045  msg.sender */
      caller
        /* "t2.sol":1008:1023  uint256 current */
      0x00
        /* "t2.sol":1026:1046  balances[msg.sender] */
      swap1
      dup2
      mstore
        /* "t2.sol":1026:1034  balances */
      0x02
        /* "t2.sol":1026:1046  balances[msg.sender] */
      0x20
      mstore
      0x40
      swap1
      keccak256
      sload
        /* "t2.sol":1060:1070  _value > 0 */
      dup6
      iszero
      dup1
      iszero
      swap1
        /* "t2.sol":1060:1091  _value > 0 && current >= amount */
      tag_46
      jumpi
      pop
        /* "t2.sol":1085:1091  amount */
      dup3
        /* "t2.sol":1074:1081  current */
      dup2
        /* "t2.sol":1074:1091  current >= amount */
      lt
      iszero
        /* "t2.sol":1060:1091  _value > 0 && current >= amount */
    tag_46:
        /* "t2.sol":1052:1092  require(_value > 0 && current >= amount) */
      tag_47
      jumpi
      0x00
      dup1
      revert
    tag_47:
        /* "t2.sol":1130:1137  current */
      dup1
        /* "t2.sol":1123:1126  sss */
      dup3
        /* "t2.sol":1123:1137  sss >= current */
      lt
      iszero
        /* "t2.sol":1116:1138  assert(sss >= current) */
      tag_48
      jumpi
      invalid
    tag_48:
        /* "t2.sol":1148:1162  sss -= current */
      swap1
      dup2
      swap1
      sub
      swap1
        /* "t2.sol":1188:1207  current.sub(amount) */
      tag_49
        /* "t2.sol":1155:1162  current */
      dup2
        /* "t2.sol":1200:1206  amount */
      dup5
        /* "t2.sol":1188:1207  current.sub(amount) */
      0xffffffff
        /* "t2.sol":1188:1199  current.sub */
      tag_50
        /* "t2.sol":1188:1207  current.sub(amount) */
      and
      jump	// in
    tag_49:
        /* "t2.sol":1225:1239  sss += current */
      swap2
      dup3
      add
      swap2
        /* "t2.sol":1178:1207  current = current.sub(amount) */
      swap1
      pop
        /* "t2.sol":1256:1270  sss >= current */
      dup1
      dup3
      lt
      iszero
        /* "t2.sol":1249:1271  assert(sss >= current) */
      tag_51
      jumpi
      invalid
    tag_51:
        /* "t2.sol":1300:1310  msg.sender */
      caller
        /* "t2.sol":1291:1311  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
        /* "t2.sol":1291:1299  balances */
      0x02
        /* "t2.sol":1291:1311  balances[msg.sender] */
      0x20
      mstore
      0x40
      dup2
      keccak256
        /* "t2.sol":1291:1321  balances[msg.sender] = current */
      dup3
      swap1
      sstore
        /* "t2.sol":1327:1662  for (uint i = 0; i < cnt; i++) {... */
    tag_52:
        /* "t2.sol":1348:1351  cnt */
      dup5
        /* "t2.sol":1344:1345  i */
      dup2
        /* "t2.sol":1344:1351  i < cnt */
      lt
        /* "t2.sol":1327:1662  for (uint i = 0; i < cnt; i++) {... */
      iszero
      tag_53
      jumpi
        /* "t2.sol":1376:1384  balances */
      0x02
        /* "t2.sol":1376:1399  balances[_receivers[i]] */
      0x00
        /* "t2.sol":1385:1395  _receivers */
      dup10
        /* "t2.sol":1396:1397  i */
      dup4
        /* "t2.sol":1385:1398  _receivers[i] */
      dup2
      mload
      dup2
      lt
      tag_55
      jumpi
      invalid
    tag_55:
      0x20
      mul
      0x20
      add
      add
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "t2.sol":1376:1399  balances[_receivers[i]] */
      and
      sub(shl(0xa0, 0x01), 0x01)
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      sload
        /* "t2.sol":1366:1399  current = balances[_receivers[i]] */
      swap2
      pop
        /* "t2.sol":1443:1450  current */
      dup2
        /* "t2.sol":1436:1439  sss */
      dup4
        /* "t2.sol":1436:1450  sss >= current */
      lt
      iszero
        /* "t2.sol":1429:1451  assert(sss >= current) */
      tag_56
      jumpi
      invalid
    tag_56:
        /* "t2.sol":1463:1477  sss -= current */
      swap2
      dup2
      swap1
      sub
      swap2
        /* "t2.sol":1507:1526  current.add(_value) */
      tag_57
        /* "t2.sol":1470:1477  current */
      dup3
        /* "t2.sol":1519:1525  _value */
      dup9
        /* "t2.sol":1507:1526  current.add(_value) */
      0xffffffff
        /* "t2.sol":1507:1518  current.add */
      tag_58
        /* "t2.sol":1507:1526  current.add(_value) */
      and
      jump	// in
    tag_57:
        /* "t2.sol":1548:1562  sss += current */
      swap3
      dup4
      add
      swap3
        /* "t2.sol":1497:1526  current = current.add(_value) */
      swap2
      pop
        /* "t2.sol":1581:1595  sss >= current */
      dup2
      dup4
      lt
      iszero
        /* "t2.sol":1574:1596  assert(sss >= current) */
      tag_59
      jumpi
      invalid
    tag_59:
        /* "t2.sol":1648:1655  current */
      dup2
        /* "t2.sol":1622:1630  balances */
      0x02
        /* "t2.sol":1622:1645  balances[_receivers[i]] */
      0x00
        /* "t2.sol":1631:1641  _receivers */
      dup11
        /* "t2.sol":1642:1643  i */
      dup5
        /* "t2.sol":1631:1644  _receivers[i] */
      dup2
      mload
      dup2
      lt
      tag_60
      jumpi
      invalid
    tag_60:
      0x20
      swap1
      dup2
      mul
      swap2
      swap1
      swap2
      add
      dup2
      add
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "t2.sol":1622:1645  balances[_receivers[i]] */
      and
      dup3
      mstore
      dup2
      add
      swap2
      swap1
      swap2
      mstore
      0x40
      add
      0x00
      keccak256
        /* "t2.sol":1622:1655  balances[_receivers[i]] = current */
      sstore
        /* "t2.sol":1353:1356  i++ */
      0x01
      add
        /* "t2.sol":1327:1662  for (uint i = 0; i < cnt; i++) {... */
      jump(tag_52)
    tag_53:
      pop
        /* "t2.sol":1675:1686  sum_balance */
      0x00
        /* "t2.sol":1675:1692  sum_balance = sss */
      dup3
      swap1
      sstore
        /* "t2.sol":1707:1718  totalSupply */
      sload(0x01)
        /* "t2.sol":1707:1725  totalSupply == sss */
      dup3
      eq
        /* "t2.sol":1700:1726  assert(totalSupply == sss) */
      tag_61
      jumpi
      invalid
    tag_61:
      pop
        /* "t2.sol":1741:1745  true */
      0x01
      swap7
        /* "t2.sol":767:1827  function batchTransfer (address[] memory _receivers, uint256 _value) public returns (bool) {... */
      swap6
      pop
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "t2.sol":1907:1935  string public symbol = "BEC" */
    tag_32:
      0x05
      dup1
      sload
      0x40
      dup1
      mload
      0x20
      0x02
      0x01
      dup6
      and
      iszero
      0x0100
      mul
      not(0x00)
      add
      swap1
      swap5
      and
      swap4
      swap1
      swap4
      div
      0x1f
      dup2
      add
      dup5
      swap1
      div
      dup5
      mul
      dup3
      add
      dup5
      add
      swap1
      swap3
      mstore
      dup2
      dup2
      mstore
      swap3
      swap2
      dup4
      add
      dup3
      dup3
      dup1
      iszero
      tag_37
      jumpi
      dup1
      0x1f
      lt
      tag_38
      jumpi
      0x0100
      dup1
      dup4
      sload
      div
      mul
      dup4
      mstore
      swap2
      0x20
      add
      swap2
      jump(tag_37)
        /* "t2.sol":305:416  function sub (uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_50:
        /* "t2.sol":364:371  uint256 */
      0x00
        /* "t2.sol":391:392  a */
      dup3
        /* "t2.sol":386:387  b */
      dup3
        /* "t2.sol":386:392  b <= a */
      gt
      iszero
        /* "t2.sol":379:393  assert(b <= a) */
      tag_67
      jumpi
      invalid
    tag_67:
      pop
        /* "t2.sol":406:411  a - b */
      swap1
      sub
      swap1
        /* "t2.sol":305:416  function sub (uint256 a, uint256 b) internal pure returns (uint256) {... */
      jump	// out
        /* "t2.sol":419:549  function add (uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_58:
        /* "t2.sol":478:485  uint256 */
      0x00
        /* "t2.sol":505:510  a + b */
      dup3
      dup3
      add
        /* "t2.sol":523:529  c >= a */
      dup4
      dup2
      lt
      iszero
        /* "t2.sol":516:530  assert(c >= a) */
      tag_69
      jumpi
      invalid
    tag_69:
        /* "t2.sol":543:544  c */
      swap4
        /* "t2.sol":419:549  function add (uint256 a, uint256 b) internal pure returns (uint256) {... */
      swap3
      pop
      pop
      pop
      jump	// out

    auxdata: 0xa165627a7a723058203be2f7db80f1077204a87c0b8875744a6afc07b6383e5603fad58a2c745f90e90029
}
