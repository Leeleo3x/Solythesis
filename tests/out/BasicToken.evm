    /* "test.sol":1244:2213  contract BasicToken is ERC20Basic {... */
  mstore(0x40, 0x80)
  callvalue
    /* "--CODEGEN--":8:17   */
  dup1
    /* "--CODEGEN--":5:7   */
  iszero
  tag_1
  jumpi
    /* "--CODEGEN--":30:31   */
  0x00
    /* "--CODEGEN--":27:28   */
  dup1
    /* "--CODEGEN--":20:32   */
  revert
    /* "--CODEGEN--":5:7   */
tag_1:
    /* "test.sol":1244:2213  contract BasicToken is ERC20Basic {... */
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "test.sol":1244:2213  contract BasicToken is ERC20Basic {... */
      mstore(0x40, 0x80)
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
        /* "test.sol":1244:2213  contract BasicToken is ERC20Basic {... */
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x18160ddd
      eq
      tag_3
      jumpi
      dup1
      0x70a08231
      eq
      tag_4
      jumpi
      dup1
      0xa9059cbb
      eq
      tag_5
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "test.sol":1048:1074  uint256 public totalSupply */
    tag_3:
      tag_6
      tag_7
      jump	// in
    tag_6:
      0x40
      dup1
      mload
      swap2
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
    tag_4:
      tag_6
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x20
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_9
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_9:
      pop
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
      calldataload
      sub(shl(0xa0, 0x01), 0x01)
      and
      tag_10
      jump	// in
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
    tag_5:
      tag_11
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_12
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_12:
      pop
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
      dup2
      calldataload
      and
      swap1
      0x20
      add
      calldataload
      tag_13
      jump	// in
    tag_11:
      0x40
      dup1
      mload
      swap2
      iszero
      iszero
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "test.sol":1048:1074  uint256 public totalSupply */
    tag_7:
      storebegin
      sload(0x00)
      dup2
      storeend
      jump	// out
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
    tag_10:
        /* "test.sol":2160:2175  uint256 balance */
      0x00
        /* "test.sol":2190:2198  balances */
      0x01
        /* "test.sol":2190:2206  balances[_owner] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup4
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap3
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
      swap2
      pop
      pop
      jump	// out
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
    tag_13:
        /* "test.sol":1567:1571  bool */
      0x00
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":1587:1604  _to != address(0) */
      dup4
      and
        /* "test.sol":1579:1605  require(_to != address(0)) */
      tag_16
      jumpi
      0x00
      dup1
      revert
    tag_16:
        /* "test.sol":1628:1629  0 */
      0x00
        /* "test.sol":1619:1625  _value */
      dup3
        /* "test.sol":1619:1629  _value > 0 */
      gt
        /* "test.sol":1619:1663  _value > 0 && _value <= balances[msg.sender] */
      dup1
      iszero
      tag_17
      jumpi
      pop
        /* "test.sol":1643:1651  balances */
      0x01
        /* "test.sol":1643:1663  balances[msg.sender] */
      storebegin
        /* "test.sol":1652:1662  msg.sender */
      caller
        /* "test.sol":1643:1663  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
        /* "test.sol":1633:1639  _value */
      dup3
        /* "test.sol":1633:1663  _value <= balances[msg.sender] */
      gt
      iszero
        /* "test.sol":1619:1663  _value > 0 && _value <= balances[msg.sender] */
    tag_17:
        /* "test.sol":1611:1664  require(_value > 0 && _value <= balances[msg.sender]) */
      tag_18
      jumpi
      0x00
      dup1
      revert
    tag_18:
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      tag_19
        /* "test.sol":1782:1788  _value */
      dup3
        /* "test.sol":1757:1765  balances */
      0x01
        /* "test.sol":1757:1777  balances[msg.sender] */
      storebegin
        /* "test.sol":1766:1776  msg.sender */
      caller
        /* "test.sol":1757:1777  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      0xffffffff
        /* "test.sol":1757:1781  balances[msg.sender].sub */
      tag_20
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      and
      jump	// in
    tag_19:
        /* "test.sol":1734:1742  balances */
      0x01
        /* "test.sol":1734:1754  balances[msg.sender] */
      storebegin
        /* "test.sol":1743:1753  msg.sender */
      caller
        /* "test.sol":1734:1754  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":1734:1789  balances[msg.sender] = balances[msg.sender].sub(_value) */
      sstore
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      tag_21
        /* "test.sol":1829:1835  _value */
      dup3
        /* "test.sol":1811:1819  balances */
      0x01
        /* "test.sol":1811:1824  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup7
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      0xffffffff
        /* "test.sol":1811:1828  balances[_to].add */
      tag_22
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      and
      jump	// in
    tag_21:
        /* "test.sol":1795:1803  balances */
      0x01
        /* "test.sol":1795:1808  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":1795:1836  balances[_to] = balances[_to].add(_value) */
      sstore
        /* "test.sol":1847:1880  Transfer(msg.sender, _to, _value) */
      0x40
      dup1
      mload
      dup4
      dup2
      mstore
      swap1
      mload
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      swap2
        /* "test.sol":1856:1866  msg.sender */
      caller
      swap2
        /* "test.sol":1847:1880  Transfer(msg.sender, _to, _value) */
      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
      swap2
      dup2
      swap1
      sub
      0x20
      add
      swap1
      log3
      pop
        /* "test.sol":1893:1897  true */
      0x01
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
      swap3
      swap2
      pop
      pop
      jump	// out
        /* "test.sol":649:759  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_20:
        /* "test.sol":707:714  uint256 */
      0x00
        /* "test.sol":734:735  a */
      dup3
        /* "test.sol":729:730  b */
      dup3
        /* "test.sol":729:735  b <= a */
      gt
      iszero
        /* "test.sol":722:736  assert(b <= a) */
      tag_24
      jumpi
      invalid
    tag_24:
      pop
        /* "test.sol":749:754  a - b */
      swap1
      sub
      swap1
        /* "test.sol":649:759  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */
      jump	// out
        /* "test.sol":763:892  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_22:
        /* "test.sol":821:828  uint256 */
      0x00
        /* "test.sol":848:853  a + b */
      dup3
      dup3
      add
        /* "test.sol":866:872  c >= a */
      dup4
      dup2
      lt
      iszero
        /* "test.sol":859:873  assert(c >= a) */
      tag_26
      jumpi
      invalid
    tag_26:
        /* "test.sol":886:887  c */
      swap4
        /* "test.sol":763:892  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */
      swap3
      pop
      pop
      pop
      jump	// out

    auxdata: 0xa265627a7a723058201a6ef74ffc776449c587512d13b5865e5735001d0256d496fb70ea8d34519fb864736f6c63782b302e352e392d646576656c6f702e323031392e372e32362b636f6d6d69742e63363862633334652e6d6f64005b
}
