    /* "test.sol":6752:7777  contract PausableToken is StandardToken, Pausable {... */
  mstore(0x40, 0x80)
    /* "test.sol":5971:5997  bool public paused = false */
  0x03
  dup1
  sload
  not(sub(shl(0xa8, 0x01), 0x01))
    /* "test.sol":5276:5294  owner = msg.sender */
  and
    /* "test.sol":5284:5294  msg.sender */
  caller
    /* "test.sol":5276:5294  owner = msg.sender */
  or
  swap1
  sstore
    /* "test.sol":6752:7777  contract PausableToken is StandardToken, Pausable {... */
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "test.sol":6752:7777  contract PausableToken is StandardToken, Pausable {... */
      mstore(0x40, 0x80)
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
        /* "test.sol":6752:7777  contract PausableToken is StandardToken, Pausable {... */
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x83f12fec
      gt
      tag_15
      jumpi
      dup1
      0x83f12fec
      eq
      tag_9
      jumpi
      dup1
      0x8456cb59
      eq
      tag_10
      jumpi
      dup1
      0x8da5cb5b
      eq
      tag_11
      jumpi
      dup1
      0xa9059cbb
      eq
      tag_12
      jumpi
      dup1
      0xdd62ed3e
      eq
      tag_13
      jumpi
      dup1
      0xf2fde38b
      eq
      tag_14
      jumpi
      jump(tag_2)
    tag_15:
      dup1
      0x095ea7b3
      eq
      tag_3
      jumpi
      dup1
      0x18160ddd
      eq
      tag_4
      jumpi
      dup1
      0x23b872dd
      eq
      tag_5
      jumpi
      dup1
      0x3f4ba83a
      eq
      tag_6
      jumpi
      dup1
      0x5c975abb
      eq
      tag_7
      jumpi
      dup1
      0x70a08231
      eq
      tag_8
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "test.sol":7101:7237  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_3:
      tag_16
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_17
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_17:
      pop
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":7101:7237  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {... */
      dup2
      calldataload
      and
      swap1
      0x20
      add
      calldataload
      tag_18
      jump	// in
    tag_16:
      0x40
      dup1
      mload
      swap2
      iszero
      iszero
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "test.sol":1048:1074  uint256 public totalSupply */
    tag_4:
      tag_19
      tag_20
      jump	// in
    tag_19:
      0x40
      dup1
      mload
      swap2
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "test.sol":6939:7097  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_5:
      tag_16
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x60
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_22
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_22:
      pop
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":6939:7097  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {... */
      dup2
      calldataload
      dup2
      and
      swap2
      0x20
      dup2
      add
      calldataload
      swap1
      swap2
      and
      swap1
      0x40
      add
      calldataload
      tag_23
      jump	// in
        /* "test.sol":6562:6654  function unpause() onlyOwner whenPaused public {... */
    tag_6:
      tag_24
      tag_25
      jump	// in
    tag_24:
      stop
        /* "test.sol":5971:5997  bool public paused = false */
    tag_7:
      tag_16
      tag_27
      jump	// in
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
    tag_8:
      tag_19
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x20
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_29
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_29:
      pop
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
      calldataload
      sub(shl(0xa0, 0x01), 0x01)
      and
      tag_30
      jump	// in
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_9:
      tag_16
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_32
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_32:
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      dup2
      add
      swap1
      0x20
      dup2
      add
      dup2
      calldataload
        /* "--CODEGEN--":21:32   */
      0x0100000000
        /* "--CODEGEN--":5:33   */
      dup2
      gt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_33
      jumpi
        /* "--CODEGEN--":46:47   */
      0x00
        /* "--CODEGEN--":43:44   */
      dup1
        /* "--CODEGEN--":36:48   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_33:
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      dup3
      add
        /* "--CODEGEN--":35:44   */
      dup4
        /* "--CODEGEN--":28:32   */
      0x20
        /* "--CODEGEN--":12:26   */
      dup3
        /* "--CODEGEN--":8:33   */
      add
        /* "--CODEGEN--":5:45   */
      gt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_34
      jumpi
        /* "--CODEGEN--":58:59   */
      0x00
        /* "--CODEGEN--":55:56   */
      dup1
        /* "--CODEGEN--":48:60   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_34:
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
        /* "--CODEGEN--":101:110   */
      dup5
        /* "--CODEGEN--":95:97   */
      0x20
        /* "--CODEGEN--":81:93   */
      dup4
        /* "--CODEGEN--":77:98   */
      mul
        /* "--CODEGEN--":67:75   */
      dup5
        /* "--CODEGEN--":63:99   */
      add
        /* "--CODEGEN--":60:111   */
      gt
        /* "--CODEGEN--":39:50   */
      0x0100000000
        /* "--CODEGEN--":25:37   */
      dup4
        /* "--CODEGEN--":22:51   */
      gt
        /* "--CODEGEN--":11:119   */
      or
        /* "--CODEGEN--":8:10   */
      iszero
      tag_35
      jumpi
        /* "--CODEGEN--":132:133   */
      0x00
        /* "--CODEGEN--":129:130   */
      dup1
        /* "--CODEGEN--":122:134   */
      revert
        /* "--CODEGEN--":8:10   */
    tag_35:
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      swap2
      swap1
      dup1
      dup1
      0x20
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      0x20
      mul
        /* "--CODEGEN--":30:33   */
      dup1
        /* "--CODEGEN--":22:28   */
      dup3
        /* "--CODEGEN--":14:20   */
      dup5
        /* "--CODEGEN--":1:34   */
      calldatacopy
        /* "--CODEGEN--":99:100   */
      0x00
        /* "--CODEGEN--":81:97   */
      swap3
      add
        /* "--CODEGEN--":74:101   */
      swap2
      swap1
      swap2
      mstore
      pop
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      swap3
      swap6
      pop
      pop
      swap2
      calldataload
      swap3
      pop
      tag_36
      swap2
      pop
      pop
      jump	// in
        /* "test.sol":6390:6480  function pause() onlyOwner whenNotPaused public {... */
    tag_10:
      tag_24
      tag_38
      jump	// in
        /* "test.sol":5018:5038  address public owner */
    tag_11:
      tag_39
      tag_40
      jump	// in
    tag_39:
      0x40
      dup1
      mload
      sub(shl(0xa0, 0x01), 0x01)
      swap1
      swap3
      and
      dup3
      mstore
      mload
      swap1
      dup2
      swap1
      sub
      0x20
      add
      swap1
      return
        /* "test.sol":6807:6935  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_12:
      tag_16
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_42
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_42:
      pop
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":6807:6935  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {... */
      dup2
      calldataload
      and
      swap1
      0x20
      add
      calldataload
      tag_43
      jump	// in
        /* "test.sol":4667:4803  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {... */
    tag_13:
      tag_19
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x40
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_45
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_45:
      pop
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":4667:4803  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {... */
      dup2
      calldataload
      dup2
      and
      swap2
      0x20
      add
      calldataload
      and
      tag_46
      jump	// in
        /* "test.sol":5609:5783  function transferOwnership(address newOwner) onlyOwner public {... */
    tag_14:
      tag_24
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x20
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_48
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_48:
      pop
        /* "test.sol":5609:5783  function transferOwnership(address newOwner) onlyOwner public {... */
      calldataload
      sub(shl(0xa0, 0x01), 0x01)
      and
      tag_49
      jump	// in
        /* "test.sol":7101:7237  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_18:
        /* "test.sol":6140:6146  paused */
      sload(0x03)
        /* "test.sol":7182:7186  bool */
      0x00
      swap1
      shl(0xa0, 0x01)
        /* "test.sol":6140:6146  paused */
      swap1
      div
      0xff
      and
        /* "test.sol":6139:6146  !paused */
      iszero
        /* "test.sol":6131:6147  require(!paused) */
      tag_51
      jumpi
      0x00
      dup1
      revert
    tag_51:
        /* "test.sol":7201:7232  super.approve(_spender, _value) */
      tag_53
        /* "test.sol":7215:7223  _spender */
      dup4
        /* "test.sol":7225:7231  _value */
      dup4
        /* "test.sol":7201:7214  super.approve */
      tag_54
        /* "test.sol":7201:7232  super.approve(_spender, _value) */
      jump	// in
    tag_53:
        /* "test.sol":7194:7232  return super.approve(_spender, _value) */
      swap4
        /* "test.sol":7101:7237  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {... */
      swap3
      pop
      pop
      pop
      jump	// out
        /* "test.sol":1048:1074  uint256 public totalSupply */
    tag_20:
      storebegin
      sload(0x00)
      dup2
      storeend
      jump	// out
        /* "test.sol":6939:7097  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_23:
        /* "test.sol":6140:6146  paused */
      sload(0x03)
        /* "test.sol":7035:7039  bool */
      0x00
      swap1
      shl(0xa0, 0x01)
        /* "test.sol":6140:6146  paused */
      swap1
      div
      0xff
      and
        /* "test.sol":6139:6146  !paused */
      iszero
        /* "test.sol":6131:6147  require(!paused) */
      tag_56
      jumpi
      0x00
      dup1
      revert
    tag_56:
        /* "test.sol":7054:7092  super.transferFrom(_from, _to, _value) */
      tag_58
        /* "test.sol":7073:7078  _from */
      dup5
        /* "test.sol":7080:7083  _to */
      dup5
        /* "test.sol":7085:7091  _value */
      dup5
        /* "test.sol":7054:7072  super.transferFrom */
      tag_59
        /* "test.sol":7054:7092  super.transferFrom(_from, _to, _value) */
      jump	// in
    tag_58:
        /* "test.sol":7047:7092  return super.transferFrom(_from, _to, _value) */
      swap5
        /* "test.sol":6939:7097  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {... */
      swap4
      pop
      pop
      pop
      pop
      jump	// out
        /* "test.sol":6562:6654  function unpause() onlyOwner whenPaused public {... */
    tag_25:
        /* "test.sol":5429:5434  owner */
      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))
        /* "test.sol":5415:5425  msg.sender */
      caller
        /* "test.sol":5415:5434  msg.sender == owner */
      eq
        /* "test.sol":5407:5435  require(msg.sender == owner) */
      tag_61
      jumpi
      0x00
      dup1
      revert
    tag_61:
        /* "test.sol":6292:6298  paused */
      sload(0x03)
      shl(0xa0, 0x01)
      swap1
      div
      0xff
      and
        /* "test.sol":6284:6299  require(paused) */
      tag_63
      jumpi
      0x00
      dup1
      revert
    tag_63:
        /* "test.sol":6615:6621  paused */
      0x03
        /* "test.sol":6615:6629  paused = false */
      dup1
      sload
      not(shl(0xa0, 0xff))
      and
      swap1
      sstore
        /* "test.sol":6640:6649  Unpause() */
      mload(0x40)
      0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33
      swap1
        /* "test.sol":6624:6629  false */
      0x00
      swap1
        /* "test.sol":6640:6649  Unpause() */
      log1
        /* "test.sol":6562:6654  function unpause() onlyOwner whenPaused public {... */
      jump	// out
        /* "test.sol":5971:5997  bool public paused = false */
    tag_27:
      storebegin
      sload(0x03)
      shl(0xa0, 0x01)
      swap1
      div
      0xff
      and
      dup2
      storeend
      jump	// out
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
    tag_30:
        /* "test.sol":2160:2175  uint256 balance */
      0x00
        /* "test.sol":2190:2198  balances */
      0x01
        /* "test.sol":2190:2206  balances[_owner] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup4
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap3
        /* "test.sol":2104:2211  function balanceOf(address _owner) public view returns (uint256 balance) {... */
      swap2
      pop
      pop
      jump	// out
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_36:
        /* "test.sol":6140:6146  paused */
      sload(0x03)
        /* "test.sol":7341:7345  bool */
      0x00
      swap1
      shl(0xa0, 0x01)
        /* "test.sol":6140:6146  paused */
      swap1
      div
      0xff
      and
        /* "test.sol":6139:6146  !paused */
      iszero
        /* "test.sol":6131:6147  require(!paused) */
      tag_67
      jumpi
      0x00
      dup1
      revert
    tag_67:
        /* "test.sol":7364:7381  _receivers.length */
      dup3
      mload
        /* "test.sol":7404:7425  uint256(cnt) * _value */
      dup3
      dup2
      mul
        /* "test.sol":7439:7446  cnt > 0 */
      dup2
      iszero
      dup1
      iszero
      swap1
        /* "test.sol":7439:7459  cnt > 0 && cnt <= 20 */
      tag_69
      jumpi
      pop
        /* "test.sol":7457:7459  20 */
      0x14
        /* "test.sol":7450:7453  cnt */
      dup3
        /* "test.sol":7450:7459  cnt <= 20 */
      gt
      iszero
        /* "test.sol":7439:7459  cnt > 0 && cnt <= 20 */
    tag_69:
        /* "test.sol":7431:7460  require(cnt > 0 && cnt <= 20) */
      tag_70
      jumpi
      0x00
      dup1
      revert
    tag_70:
        /* "test.sol":7483:7484  0 */
      0x00
        /* "test.sol":7474:7480  _value */
      dup5
        /* "test.sol":7474:7484  _value > 0 */
      gt
        /* "test.sol":7474:7518  _value > 0 && balances[msg.sender] >= amount */
      dup1
      iszero
      tag_71
      jumpi
      pop
        /* "test.sol":7512:7518  amount */
      dup1
        /* "test.sol":7488:7496  balances */
      0x01
        /* "test.sol":7488:7508  balances[msg.sender] */
      storebegin
        /* "test.sol":7497:7507  msg.sender */
      caller
        /* "test.sol":7488:7508  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
        /* "test.sol":7488:7518  balances[msg.sender] >= amount */
      lt
      iszero
        /* "test.sol":7474:7518  _value > 0 && balances[msg.sender] >= amount */
    tag_71:
        /* "test.sol":7466:7519  require(_value > 0 && balances[msg.sender] >= amount) */
      tag_72
      jumpi
      0x00
      dup1
      revert
    tag_72:
        /* "test.sol":7549:7581  balances[msg.sender].sub(amount) */
      tag_73
        /* "test.sol":7574:7580  amount */
      dup2
        /* "test.sol":7549:7557  balances */
      0x01
        /* "test.sol":7549:7569  balances[msg.sender] */
      storebegin
        /* "test.sol":7558:7568  msg.sender */
      caller
        /* "test.sol":7549:7569  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":7549:7581  balances[msg.sender].sub(amount) */
      0xffffffff
        /* "test.sol":7549:7573  balances[msg.sender].sub */
      tag_74
        /* "test.sol":7549:7581  balances[msg.sender].sub(amount) */
      and
      jump	// in
    tag_73:
        /* "test.sol":7526:7534  balances */
      0x01
        /* "test.sol":7526:7546  balances[msg.sender] */
      storebegin
        /* "test.sol":7535:7545  msg.sender */
      caller
        /* "test.sol":7526:7546  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":7526:7581  balances[msg.sender] = balances[msg.sender].sub(amount) */
      sstore
        /* "test.sol":7592:7598  uint i */
      0x00
        /* "test.sol":7587:7754  for (uint i = 0; i < cnt; i++) {... */
    tag_75:
        /* "test.sol":7608:7611  cnt */
      dup3
        /* "test.sol":7604:7605  i */
      dup2
        /* "test.sol":7604:7611  i < cnt */
      lt
        /* "test.sol":7587:7754  for (uint i = 0; i < cnt; i++) {... */
      iszero
      tag_76
      jumpi
        /* "test.sol":7654:7689  balances[_receivers[i]].add(_value) */
      tag_78
        /* "test.sol":7682:7688  _value */
      dup6
        /* "test.sol":7654:7662  balances */
      0x01
        /* "test.sol":7654:7677  balances[_receivers[i]] */
      storebegin
      0x00
        /* "test.sol":7663:7673  _receivers */
      dup10
        /* "test.sol":7674:7675  i */
      dup6
        /* "test.sol":7663:7676  _receivers[i] */
      dup2
      mload
      dup2
      lt
      tag_79
      jumpi
      invalid
    tag_79:
      0x20
      mul
      0x20
      add
      add
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":7654:7677  balances[_receivers[i]] */
      and
      sub(shl(0xa0, 0x01), 0x01)
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
      storeend
      pop
      sload
      swap1
        /* "test.sol":7654:7689  balances[_receivers[i]].add(_value) */
      0xffffffff
        /* "test.sol":7654:7681  balances[_receivers[i]].add */
      tag_80
        /* "test.sol":7654:7689  balances[_receivers[i]].add(_value) */
      and
      jump	// in
    tag_78:
        /* "test.sol":7628:7636  balances */
      0x01
        /* "test.sol":7628:7651  balances[_receivers[i]] */
      storebegin
      0x00
        /* "test.sol":7637:7647  _receivers */
      dup9
        /* "test.sol":7648:7649  i */
      dup5
        /* "test.sol":7637:7650  _receivers[i] */
      dup2
      mload
      dup2
      lt
      tag_81
      jumpi
      invalid
    tag_81:
      0x20
      mul
      0x20
      add
      add
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":7628:7651  balances[_receivers[i]] */
      and
      sub(shl(0xa0, 0x01), 0x01)
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
      storeend
      pop
        /* "test.sol":7628:7689  balances[_receivers[i]] = balances[_receivers[i]].add(_value) */
      sstore
        /* "test.sol":7725:7738  _receivers[i] */
      dup6
      mload
        /* "test.sol":7725:7735  _receivers */
      dup7
      swap1
        /* "test.sol":7736:7737  i */
      dup3
      swap1
        /* "test.sol":7725:7738  _receivers[i] */
      dup2
      lt
      tag_82
      jumpi
      invalid
    tag_82:
      0x20
      mul
      0x20
      add
      add
      mload
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":7704:7747  Transfer(msg.sender, _receivers[i], _value) */
      and
        /* "test.sol":7713:7723  msg.sender */
      caller
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":7704:7747  Transfer(msg.sender, _receivers[i], _value) */
      and
      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        /* "test.sol":7740:7746  _value */
      dup8
        /* "test.sol":7704:7747  Transfer(msg.sender, _receivers[i], _value) */
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      log3
        /* "test.sol":7613:7616  i++ */
      0x01
      add
        /* "test.sol":7587:7754  for (uint i = 0; i < cnt; i++) {... */
      jump(tag_75)
    tag_76:
      pop
        /* "test.sol":7766:7770  true */
      0x01
      swap6
        /* "test.sol":7243:7775  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {... */
      swap5
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "test.sol":6390:6480  function pause() onlyOwner whenNotPaused public {... */
    tag_38:
        /* "test.sol":5429:5434  owner */
      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))
        /* "test.sol":5415:5425  msg.sender */
      caller
        /* "test.sol":5415:5434  msg.sender == owner */
      eq
        /* "test.sol":5407:5435  require(msg.sender == owner) */
      tag_84
      jumpi
      0x00
      dup1
      revert
    tag_84:
        /* "test.sol":6140:6146  paused */
      sload(0x03)
      shl(0xa0, 0x01)
      swap1
      div
      0xff
      and
        /* "test.sol":6139:6146  !paused */
      iszero
        /* "test.sol":6131:6147  require(!paused) */
      tag_86
      jumpi
      0x00
      dup1
      revert
    tag_86:
        /* "test.sol":6444:6450  paused */
      0x03
        /* "test.sol":6444:6457  paused = true */
      dup1
      sload
      not(shl(0xa0, 0xff))
      and
      shl(0xa0, 0x01)
      or
      swap1
      sstore
        /* "test.sol":6468:6475  Pause() */
      mload(0x40)
      0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625
      swap1
        /* "test.sol":6444:6457  paused = true */
      0x00
      swap1
        /* "test.sol":6468:6475  Pause() */
      log1
        /* "test.sol":6390:6480  function pause() onlyOwner whenNotPaused public {... */
      jump	// out
        /* "test.sol":5018:5038  address public owner */
    tag_40:
      storebegin
      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))
      dup2
      storeend
      jump	// out
        /* "test.sol":6807:6935  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {... */
    tag_43:
        /* "test.sol":6140:6146  paused */
      sload(0x03)
        /* "test.sol":6884:6888  bool */
      0x00
      swap1
      shl(0xa0, 0x01)
        /* "test.sol":6140:6146  paused */
      swap1
      div
      0xff
      and
        /* "test.sol":6139:6146  !paused */
      iszero
        /* "test.sol":6131:6147  require(!paused) */
      tag_89
      jumpi
      0x00
      dup1
      revert
    tag_89:
        /* "test.sol":6903:6930  super.transfer(_to, _value) */
      tag_53
        /* "test.sol":6918:6921  _to */
      dup4
        /* "test.sol":6923:6929  _value */
      dup4
        /* "test.sol":6903:6917  super.transfer */
      tag_92
        /* "test.sol":6903:6930  super.transfer(_to, _value) */
      jump	// in
        /* "test.sol":4667:4803  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {... */
    tag_46:
        /* "test.sol":4741:4758  uint256 remaining */
      0x00
        /* "test.sol":4773:4780  allowed */
      0x02
        /* "test.sol":4773:4788  allowed[_owner] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup5
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":4773:4798  allowed[_owner][_spender] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup4
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap4
        /* "test.sol":4667:4803  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {... */
      swap3
      pop
      pop
      pop
      jump	// out
        /* "test.sol":5609:5783  function transferOwnership(address newOwner) onlyOwner public {... */
    tag_49:
        /* "test.sol":5429:5434  owner */
      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))
        /* "test.sol":5415:5425  msg.sender */
      caller
        /* "test.sol":5415:5434  msg.sender == owner */
      eq
        /* "test.sol":5407:5435  require(msg.sender == owner) */
      tag_95
      jumpi
      0x00
      dup1
      revert
    tag_95:
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":5685:5707  newOwner != address(0) */
      dup2
      and
        /* "test.sol":5677:5708  require(newOwner != address(0)) */
      tag_97
      jumpi
      0x00
      dup1
      revert
    tag_97:
        /* "test.sol":5740:5745  owner */
      sload(0x03)
        /* "test.sol":5719:5756  OwnershipTransferred(owner, newOwner) */
      mload(0x40)
      sub(shl(0xa0, 0x01), 0x01)
      dup1
      dup5
      and
      swap3
        /* "test.sol":5740:5745  owner */
      and
      swap1
        /* "test.sol":5719:5756  OwnershipTransferred(owner, newOwner) */
      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0
      swap1
        /* "test.sol":5740:5745  owner */
      0x00
      swap1
        /* "test.sol":5719:5756  OwnershipTransferred(owner, newOwner) */
      log3
        /* "test.sol":5762:5767  owner */
      0x03
        /* "test.sol":5762:5778  owner = newOwner */
      dup1
      sload
      not(sub(shl(0xa0, 0x01), 0x01))
      and
      sub(shl(0xa0, 0x01), 0x01)
      swap3
      swap1
      swap3
      and
      swap2
      swap1
      swap2
      or
      swap1
      sstore
        /* "test.sol":5609:5783  function transferOwnership(address newOwner) onlyOwner public {... */
      jump	// out
        /* "test.sol":4160:4348  function approve(address _spender, uint256 _value) public returns (bool) {... */
    tag_54:
        /* "test.sol":4227:4231  bool */
      0x00
        /* "test.sol":4271:4277  _value */
      dup2
        /* "test.sol":4239:4246  allowed */
      0x02
        /* "test.sol":4239:4258  allowed[msg.sender] */
      storebegin
        /* "test.sol":4247:4257  msg.sender */
      caller
        /* "test.sol":4239:4258  allowed[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":4239:4268  allowed[msg.sender][_spender] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":4239:4277  allowed[msg.sender][_spender] = _value */
      sstore
        /* "test.sol":4288:4326  Approval(msg.sender, _spender, _value) */
      0x40
      dup1
      mload
      dup4
      dup2
      mstore
      swap1
      mload
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      swap2
        /* "test.sol":4297:4307  msg.sender */
      caller
      swap2
        /* "test.sol":4288:4326  Approval(msg.sender, _spender, _value) */
      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
      swap2
      dup2
      swap1
      sub
      0x20
      add
      swap1
      log3
      pop
        /* "test.sol":4339:4343  true */
      0x01
        /* "test.sol":4160:4348  function approve(address _spender, uint256 _value) public returns (bool) {... */
      swap3
      swap2
      pop
      pop
      jump	// out
        /* "test.sol":3079:3537  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {... */
    tag_59:
        /* "test.sol":3161:3165  bool */
      0x00
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":3181:3198  _to != address(0) */
      dup4
      and
        /* "test.sol":3173:3199  require(_to != address(0)) */
      tag_100
      jumpi
      0x00
      dup1
      revert
    tag_100:
        /* "test.sol":3222:3223  0 */
      0x00
        /* "test.sol":3213:3219  _value */
      dup3
        /* "test.sol":3213:3223  _value > 0 */
      gt
        /* "test.sol":3213:3252  _value > 0 && _value <= balances[_from] */
      dup1
      iszero
      tag_101
      jumpi
      pop
        /* "test.sol":3237:3245  balances */
      0x01
        /* "test.sol":3237:3252  balances[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
        /* "test.sol":3227:3233  _value */
      dup3
        /* "test.sol":3227:3252  _value <= balances[_from] */
      gt
      iszero
        /* "test.sol":3213:3252  _value > 0 && _value <= balances[_from] */
    tag_101:
        /* "test.sol":3205:3253  require(_value > 0 && _value <= balances[_from]) */
      tag_102
      jumpi
      0x00
      dup1
      revert
    tag_102:
        /* "test.sol":3277:3284  allowed */
      0x02
        /* "test.sol":3277:3291  allowed[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3277:3303  allowed[_from][msg.sender] */
      storebegin
        /* "test.sol":3292:3302  msg.sender */
      caller
        /* "test.sol":3277:3303  allowed[_from][msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
        /* "test.sol":3267:3273  _value */
      dup3
        /* "test.sol":3267:3303  _value <= allowed[_from][msg.sender] */
      gt
      iszero
        /* "test.sol":3259:3304  require(_value <= allowed[_from][msg.sender]) */
      tag_103
      jumpi
      0x00
      dup1
      revert
    tag_103:
        /* "test.sol":3329:3356  balances[_from].sub(_value) */
      tag_104
        /* "test.sol":3349:3355  _value */
      dup3
        /* "test.sol":3329:3337  balances */
      0x01
        /* "test.sol":3329:3344  balances[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup8
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":3329:3356  balances[_from].sub(_value) */
      0xffffffff
        /* "test.sol":3329:3348  balances[_from].sub */
      tag_74
        /* "test.sol":3329:3356  balances[_from].sub(_value) */
      and
      jump	// in
    tag_104:
        /* "test.sol":3311:3319  balances */
      0x01
        /* "test.sol":3311:3326  balances[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup7
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3311:3356  balances[_from] = balances[_from].sub(_value) */
      sstore
        /* "test.sol":3378:3403  balances[_to].add(_value) */
      tag_105
        /* "test.sol":3396:3402  _value */
      dup3
        /* "test.sol":3378:3386  balances */
      0x01
        /* "test.sol":3378:3391  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup7
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":3378:3403  balances[_to].add(_value) */
      0xffffffff
        /* "test.sol":3378:3395  balances[_to].add */
      tag_80
        /* "test.sol":3378:3403  balances[_to].add(_value) */
      and
      jump	// in
    tag_105:
        /* "test.sol":3362:3370  balances */
      0x01
        /* "test.sol":3362:3375  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3362:3403  balances[_to] = balances[_to].add(_value) */
      sstore
        /* "test.sol":3438:3476  allowed[_from][msg.sender].sub(_value) */
      tag_106
        /* "test.sol":3469:3475  _value */
      dup3
        /* "test.sol":3438:3445  allowed */
      0x02
        /* "test.sol":3438:3452  allowed[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup8
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3438:3464  allowed[_from][msg.sender] */
      storebegin
        /* "test.sol":3453:3463  msg.sender */
      caller
        /* "test.sol":3438:3464  allowed[_from][msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":3438:3476  allowed[_from][msg.sender].sub(_value) */
      0xffffffff
        /* "test.sol":3438:3468  allowed[_from][msg.sender].sub */
      tag_74
        /* "test.sol":3438:3476  allowed[_from][msg.sender].sub(_value) */
      and
      jump	// in
    tag_106:
        /* "test.sol":3409:3416  allowed */
      0x02
        /* "test.sol":3409:3423  allowed[_from] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup7
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3409:3435  allowed[_from][msg.sender] */
      storebegin
        /* "test.sol":3424:3434  msg.sender */
      caller
        /* "test.sol":3409:3435  allowed[_from][msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":3409:3476  allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value) */
      sstore
        /* "test.sol":3487:3515  Transfer(_from, _to, _value) */
      0x40
      dup1
      mload
      dup4
      dup2
      mstore
      swap1
      mload
      sub(shl(0xa0, 0x01), 0x01)
      dup1
      dup7
      and
      swap3
      swap1
      dup8
      and
      swap2
      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
      swap2
      dup2
      swap1
      sub
      0x20
      add
      swap1
      log3
      pop
        /* "test.sol":3528:3532  true */
      0x01
        /* "test.sol":3079:3537  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {... */
      swap4
      swap3
      pop
      pop
      pop
      jump	// out
        /* "test.sol":649:759  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_74:
        /* "test.sol":707:714  uint256 */
      0x00
        /* "test.sol":734:735  a */
      dup3
        /* "test.sol":729:730  b */
      dup3
        /* "test.sol":729:735  b <= a */
      gt
      iszero
        /* "test.sol":722:736  assert(b <= a) */
      tag_108
      jumpi
      invalid
    tag_108:
      pop
        /* "test.sol":749:754  a - b */
      swap1
      sub
      swap1
        /* "test.sol":649:759  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */
      jump	// out
        /* "test.sol":763:892  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */
    tag_80:
        /* "test.sol":821:828  uint256 */
      0x00
        /* "test.sol":848:853  a + b */
      dup3
      dup3
      add
        /* "test.sol":866:872  c >= a */
      dup4
      dup2
      lt
      iszero
        /* "test.sol":859:873  assert(c >= a) */
      tag_53
      jumpi
      invalid
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
    tag_92:
        /* "test.sol":1567:1571  bool */
      0x00
      sub(shl(0xa0, 0x01), 0x01)
        /* "test.sol":1587:1604  _to != address(0) */
      dup4
      and
        /* "test.sol":1579:1605  require(_to != address(0)) */
      tag_112
      jumpi
      0x00
      dup1
      revert
    tag_112:
        /* "test.sol":1628:1629  0 */
      0x00
        /* "test.sol":1619:1625  _value */
      dup3
        /* "test.sol":1619:1629  _value > 0 */
      gt
        /* "test.sol":1619:1663  _value > 0 && _value <= balances[msg.sender] */
      dup1
      iszero
      tag_113
      jumpi
      pop
        /* "test.sol":1643:1651  balances */
      0x01
        /* "test.sol":1643:1663  balances[msg.sender] */
      storebegin
        /* "test.sol":1652:1662  msg.sender */
      caller
        /* "test.sol":1643:1663  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
        /* "test.sol":1633:1639  _value */
      dup3
        /* "test.sol":1633:1663  _value <= balances[msg.sender] */
      gt
      iszero
        /* "test.sol":1619:1663  _value > 0 && _value <= balances[msg.sender] */
    tag_113:
        /* "test.sol":1611:1664  require(_value > 0 && _value <= balances[msg.sender]) */
      tag_114
      jumpi
      0x00
      dup1
      revert
    tag_114:
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      tag_115
        /* "test.sol":1782:1788  _value */
      dup3
        /* "test.sol":1757:1765  balances */
      0x01
        /* "test.sol":1757:1777  balances[msg.sender] */
      storebegin
        /* "test.sol":1766:1776  msg.sender */
      caller
        /* "test.sol":1757:1777  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      0xffffffff
        /* "test.sol":1757:1781  balances[msg.sender].sub */
      tag_74
        /* "test.sol":1757:1789  balances[msg.sender].sub(_value) */
      and
      jump	// in
    tag_115:
        /* "test.sol":1734:1742  balances */
      0x01
        /* "test.sol":1734:1754  balances[msg.sender] */
      storebegin
        /* "test.sol":1743:1753  msg.sender */
      caller
        /* "test.sol":1734:1754  balances[msg.sender] */
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":1734:1789  balances[msg.sender] = balances[msg.sender].sub(_value) */
      sstore
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      tag_116
        /* "test.sol":1829:1835  _value */
      dup3
        /* "test.sol":1811:1819  balances */
      0x01
        /* "test.sol":1811:1824  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup7
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
      sload
      swap1
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      0xffffffff
        /* "test.sol":1811:1828  balances[_to].add */
      tag_80
        /* "test.sol":1811:1836  balances[_to].add(_value) */
      and
      jump	// in
    tag_116:
        /* "test.sol":1795:1803  balances */
      0x01
        /* "test.sol":1795:1808  balances[_to] */
      storebegin
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      0x00
      swap1
      dup2
      mstore
      0x20
      swap2
      swap1
      swap2
      mstore
      0x40
      dup2
      keccak256
      swap1
      storeend
      pop
        /* "test.sol":1795:1836  balances[_to] = balances[_to].add(_value) */
      sstore
        /* "test.sol":1847:1880  Transfer(msg.sender, _to, _value) */
      0x40
      dup1
      mload
      dup4
      dup2
      mstore
      swap1
      mload
      sub(shl(0xa0, 0x01), 0x01)
      dup6
      and
      swap2
        /* "test.sol":1856:1866  msg.sender */
      caller
      swap2
        /* "test.sol":1847:1880  Transfer(msg.sender, _to, _value) */
      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
      swap2
      dup2
      swap1
      sub
      0x20
      add
      swap1
      log3
      pop
        /* "test.sol":1893:1897  true */
      0x01
        /* "test.sol":1504:1902  function transfer(address _to, uint256 _value) public returns (bool) {... */
      swap3
      swap2
      pop
      pop
      jump	// out

    auxdata: 0xa265627a7a72305820f1ffcff99b9a23b7a9e175f36a587b9c6bd7602136ac19365ca13bc772d1ff1564736f6c63782b302e352e392d646576656c6f702e323031392e372e32362b636f6d6d69742e63363862633334652e6d6f64005b
}
